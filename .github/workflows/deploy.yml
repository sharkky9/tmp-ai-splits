name: Deploy to Vercel

on:
  push:
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Or your project's node version

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install Dependencies
        working-directory: ./app_code # Assuming your app is in app_code/
        run: pnpm install # Or pnpm install / yarn install based on your project

      - name: Run Lint Check
        working-directory: ./app_code # Assuming your app is in app_code/
        run: pnpm run lint # Or your specific lint command

      # Add test step if you have one, e.g.:
      # - name: Run Tests
      #   working-directory: ./app_code # Assuming your app is in app_code/
      #   run: pnpm run test # Or your specific test command
      #   env:
      #     # Add any necessary environment variables for your tests here
      #     # Example: CI_ENV_VAR: ${{ secrets.YOUR_TEST_SECRET }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        working-directory: ./app_code # Vercel commands should run from the project root
        run: |
          vercel pull --yes --environment=${{ github.ref_name == 'main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}
          # Copy environment variables to .env.local for Next.js build
          if [ -f .vercel/.env.${{ github.ref_name == 'main' && 'production' || 'preview' }}.local ]; then
            cp .vercel/.env.${{ github.ref_name == 'main' && 'production' || 'preview' }}.local .env.local
          elif [ -f .vercel/.env.local ]; then
            cp .vercel/.env.local .env.local
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        working-directory: ./app_code # Vercel commands should run from the project root
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy Project Artifacts to Vercel
        working-directory: ./app_code # Vercel commands should run from the project root
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }} 