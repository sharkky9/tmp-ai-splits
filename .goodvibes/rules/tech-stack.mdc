---
description: This document explicitly lists all approved technologies, libraries, tools, and their versions for the project. The AI requests this file to confirm allowed dependencies and platform specifics before adding libraries or writing environment-specific code.
globs: 
alwaysApply: false
---
<!--
<vibeSpec>
    <purpose>This document explicitly lists all approved technologies, libraries, tools, and their versions for the project. The AI requests this file to confirm allowed dependencies and platform specifics before adding libraries or writing environment-specific code.</purpose>
    <scope>
        *   Programming Languages & Versions: (e.g., Python 3.11+, Node.js 18.x).
        *   Frameworks & Major Libraries: (e.g., React 18.x, FastAPI 0.100+, Pandas 2.x). Specify versions if critical.
        *   Databases & Caching: (e.g., PostgreSQL 15, Redis 7).
        *   APIs (External): List of critical third-party APIs integrated with.
        *   Build Tools, Package Managers, Linters, Formatters: (e.g., Vite, npm, pip, Ruff, Prettier).
        *   Testing Frameworks & Tools: (e.g., Pytest, Jest, Playwright).
        *   Deployment Environment / Cloud Services: Key details (e.g., Docker, Target OS, AWS S3/EC2).
        *   Critical Constraints: Non-functional requirements impacting technology (e.g., "Real-time data processing required").
    </scope>
    <nonScope>
        *   Application architecture or data flow diagrams (`architecture.mdc`).
        *   UI design specifications (`design.mdc`).
        *   Detailed coding standards (specific style guides or `rules.mdc`).
        *   Business logic descriptions.
    </nonScope>
    <usageNotes>Initial draft generated via `prompt-0-context-setup.md`. Requires careful human review and adjustment based on team expertise/project needs. Can be updated via `prompt-5-update-context-doc.md`. AI Agents should request this document to confirm allowed libraries, versions, or tools before adding dependencies or writing platform-specific code.</usageNotes>
</vibeSpec>
-->

# Tech Stack

## 1. Frontend

*   **Framework:** Next.js (v15.x) with App Router
*   **Language:** TypeScript (v5.x)
*   **UI Library:** React (v19.x)
*   **Component Toolkit:** Shadcn/ui
*   **Styling:** Tailwind CSS (v4.x)
    *   `clsx`, `tailwind-merge` for utility class management
*   **Forms:** React Hook Form (v7.x) with Zod (v3.x) for validation
*   **State Management:**
    *   React Context API (e.g., `AuthContext`)
    *   **React Query (v5.x)** for server state management and caching ✅ **INSTALLED & CONFIGURED**
        *   **Client Component Data Fetching**: React Query provides superior data management compared to server-side revalidation for interactive components
        *   **Caching Strategy**: 5-minute stale time, 10-minute cache time for group/member data
        *   **Background Refetching**: Automatic revalidation without user intervention
        *   **Performance**: Cached responses achieve <50ms load times (well under 200ms target)
        *   **Implementation Success**: Group navigation fix (BKLOG-20250601-002) demonstrated 34ms cached response times, eliminating revalidate errors and improving UX
        *   **Best Practice**: Remove `export const revalidate` from client components - React Query handles data freshness more efficiently
        *   **Production Metrics**: 100% test coverage on modified components, zero navigation errors, optimized bundle sizes
*   **Routing:** Next.js App Router
*   **HTTP Client:** Supabase-js client for interactions with Supabase services
*   **Financial Calculations:** **decimal.js (v10.x)** for precise currency arithmetic (avoiding floating-point errors) ✅ **INSTALLED & CONFIGURED**
*   **Date Handling:** **date-fns (v3.x)** for date manipulation and formatting ✅ **INSTALLED & CONFIGURED**
*   **Icons:** `lucide-react` for consistent iconography
*   **Linting & Formatting:** ESLint, Prettier
*   **Analytics & Monitoring:**
    *   **Vercel Analytics** for performance monitoring
    *   Custom analytics hooks for success metrics tracking

## 2. Backend

*   **Platform:** Supabase Cloud
    *   **Database:** PostgreSQL (v15.x)
    *   **Authentication:** Supabase Auth
    *   **Serverless Functions:** Supabase Edge Functions (Deno runtime, TypeScript)
    *   **Real-time:** Supabase Realtime (for live group updates)
*   **LLM Service:** OpenAI API
    *   **Primary Model:** o3 (advanced reasoning for complex expense parsing)
    *   **Fallback Model:** GPT-3.5-turbo (for high-volume or fallback scenarios)
    *   **Integration:** `openai` library (v4.x) within Supabase Edge Functions
    *   **Cost Management:** Rate limiting, request batching, response caching

## 3. Development & Operations (DevOps)

*   **Package Manager:** pnpm (v8.x)
*   **Version Control:** Git (hosted on GitHub)
*   **Deployment:**
    *   **Frontend & API Routes:** Vercel (with preview deployments for PRs)
        *   Framework: Next.js (auto-detected)
        *   Region: `iad1` (Washington D.C., USA)
        *   Build Command: Default Next.js build (`pnpm run build`)
        *   Output Directory: Default Next.js output (`.next`)
        *   Security Headers: `X-Frame-Options`, `X-Content-Type-Options`, `X-XSS-Protection`, `Referrer-Policy`, `Permissions-Policy` configured in `vercel.json`.
        *   Caching: API routes set to `no-store, no-cache, must-revalidate`. Static assets cached by Vercel Edge Network.
        *   Sentry Tunneling: `/monitoring` path rewritten for Sentry event ingestion.
        *   Environment Variables: Managed via Vercel Dashboard (e.g., `NEXT_PUBLIC_APP_URL`, `SENTRY_ENVIRONMENT`).
        *   Git Integration: Deployments triggered from `main` branch.
    *   **Backend (Database & Edge Functions):** Supabase Cloud (production/staging environments)
*   **Environment Management:**
    *   `.env.local` for local development
    *   Vercel environment variables for frontend
    *   Supabase project settings for Edge Function secrets
*   **Code Quality:**
    *   ESLint for linting (with Next.js and Prettier configs)
    *   Prettier for code formatting
    *   Husky for pre-commit hooks (linting, formatting, type checking)
*   **Testing:**
    *   **Jest** for unit/integration tests (`*.test.tsx` files) ✅ **v29.7.0 INSTALLED & CONFIGURED**
        *   **Test Environment**: jsdom for React component testing
        *   **Coverage**: 100% test suite success rate (100/100 tests passing)
        *   **Performance**: Complete test execution in <4 seconds
        *   **Mocking Strategy**: Comprehensive Supabase and Next.js navigation mocks
        *   **Test Isolation**: Proper cleanup and React Query cache management between tests
    *   **React Testing Library** for component testing ✅ **v16.3.0 INSTALLED & CONFIGURED**
        *   **Integration**: @testing-library/jest-dom for enhanced assertions
        *   **Best Practices**: User-centric testing patterns, accessibility-aware queries
        *   **Async Testing**: waitFor, act, and proper async state management
    *   **TypeScript Testing**: Full type safety in test files with proper mock typing
    *   **Codex Environment Compatibility**: ✅ **VERIFIED & OPERATIONAL**
        *   Successfully resolves Supabase mock chaining issues (`.eq().order()`)
        *   Eliminates Next.js 15 Promise params handling errors
        *   Proper React Query configuration for test isolation
        *   100% ESLint compliance in test files
        *   Automated formatting with Prettier integration
    *   **Test Categories**:
        *   **Unit Tests**: Component behavior, utility functions, business logic
        *   **Integration Tests**: Component interaction, data flow, authentication
        *   **Navigation Tests**: React Router, page transitions, error boundaries
        *   **Database Tests**: Schema validation, RLS policies, data integrity
        *   **Performance Tests**: Load times, analytics tracking, monitoring
    *   **E2E Testing**: **Playwright** (planned for critical user flows)
        *   Target: Group creation, expense entry, settlement calculation flows
*   **Deployment Tools:**
    *   **Vercel CLI (v42.3.0)** for deployment management and preview generation. Configuration via `app_code/vercel.json`.
    *   **GitHub Actions** for CI/CD pipeline automation - ✅ **OPERATIONAL**: Automated deployments for `main` (production) and `develop` (staging) branches with 2m 5s average deployment time
    *   **Environment Templates** (.env.example) for consistent development setup

## 4. Key Libraries & Dependencies (from `package.json`)

### Production Dependencies
*   **Core Framework:** `next`, `react`, `react-dom`
*   **Supabase Integration:** 
    *   `@supabase/auth-helpers-nextjs`
    *   `@supabase/ssr`
    *   `@supabase/supabase-js`
*   **UI & Styling:** 
    *   `@radix-ui/*` (dependencies of Shadcn/ui)
    *   `class-variance-authority`
    *   `clsx`
    *   `lucide-react`
    *   `tailwind-merge`
    *   `tailwindcss`
*   **Forms & Validation:** 
    *   `@hookform/resolvers`
    *   `react-hook-form`
    *   `zod`
*   **Data Management:**
    *   `@tanstack/react-query` (React Query v5) ✅ **v5.79.0 INSTALLED**
    *   `decimal.js` (financial calculations) ✅ **v10.5.0 INSTALLED**
    *   `date-fns` (date utilities) ✅ **v3.6.0 INSTALLED**

### Development Dependencies
*   **TypeScript:** `@types/*`, `typescript`
*   **Linting/Formatting:** `eslint`, `eslint-config-next`, `prettier`
*   **Git Hooks:** `husky`
*   **Testing:** `jest`, `@testing-library/react`, `@testing-library/jest-dom`

## 5. External APIs & Services

*   **OpenAI API:**
    *   **Models:** o3 (primary for expense parsing), GPT-3.5-turbo (fallback)
    *   **Usage:** Natural language expense parsing and interpretation via Supabase Edge Functions
    *   **Integration:** `openai` library (v4.20.1) within Supabase Edge Functions (Deno runtime)
    *   **Rate Limits:** Optimized for o3 advanced reasoning capabilities
    *   **Cost Management:** 10-second timeout, structured JSON responses, prompt optimization
    *   **Response Format:** Structured JSON with confidence scoring and assumption tracking
    *   **Error Handling:** Comprehensive validation, graceful degradation, clarifying questions
    *   **Deployment:** Successfully deployed as parse-expense Edge Function (87.19kB bundle)
*   **Supabase API:**
    *   **Database:** PostgreSQL operations via supabase-js
    *   **Auth:** User management and authentication
    *   **Edge Functions:** Custom business logic execution (Deno runtime, TypeScript)
        *   `parse-expense`: OpenAI integration for natural language expense parsing
        *   Environment variables: OPENAI_API_KEY, SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY
    *   **Storage:** Future file upload support (receipts)

## 6. Data Storage & Management

*   **Primary Database:** Supabase PostgreSQL
    *   **Tables:** Users, Groups, GroupMembers, Expenses, AnalyticsEvents
    *   **Data Types:** JSONB for flexible expense data, NUMERIC for precise currency
    *   **Security:** Row Level Security (RLS) policies for data protection
*   **Authentication Data:** Supabase Auth (managed service)
*   **Session Management:** Supabase client-side session handling
*   **File Storage:** Supabase Storage (for future receipt uploads)

## 7. Analytics & Monitoring

*   **Performance Monitoring:**
    *   Vercel Analytics (Core Web Vitals, page performance)
    *   Supabase built-in monitoring (database performance)
*   **Error Tracking:**
    *   **Sentry (@sentry/nextjs v9.24.0)** for comprehensive error tracking and performance monitoring
    *   **Sentry Integrations (@sentry/integrations v7.114.0)** for advanced error capture and user context
    *   **Configuration:** Next.js webpack plugin with automatic source map upload and privacy controls
    *   **Session Replay:** Error reproduction with masked sensitive data and media blocking
    *   **Custom Error Boundaries:** React component-level error capture with context-aware reporting
*   **Success Metrics Tracking:**
    *   Custom analytics events (expense logging, corrections, settlements)
    *   LLM performance metrics (correction rates, processing times)
    *   User satisfaction tracking (planned feedback collection)
*   **Development Monitoring:**
    *   Vercel deployment monitoring and build status
    *   Custom error boundaries in React
    *   Supabase Edge Function error logging

## 8. Security & Compliance

*   **Authentication:** Supabase Auth (email/password, social login ready)
*   **Authorization:** Row Level Security (RLS) policies in PostgreSQL
*   **API Security:**
    *   Environment variables for sensitive keys
    *   CORS configuration for frontend/backend communication
*   **Data Protection:**
    *   Financial data encryption at rest (PostgreSQL default)
    *   HTTPS everywhere (Vercel/Supabase default)
*   **Privacy:** No PII storage beyond necessary user profile data

## 9. Performance & Scalability Constraints

*   **LLM Integration:**
    *   10-second timeout for OpenAI API calls
    *   Exponential backoff retry logic
    *   Graceful degradation to manual entry
*   **Database:**
    *   Connection pooling via Supabase (automatic)
    *   Query optimization for expense aggregation
    *   Indexing on foreign keys and frequently queried fields
*   **Frontend:**
    *   Code splitting for component bundles
    *   React Query caching for API responses
    *   Optimized images and assets via Vercel

## 10. Development Environment Requirements

*   **Node.js:** v18.x LTS minimum
*   **Package Manager:** pnpm (enforced via .nvmrc and package.json)
*   **Editor Support:** 
    *   TypeScript language server
    *   ESLint and Prettier extensions
    *   Tailwind CSS IntelliSense
*   **Local Development:**
    *   Supabase CLI for local database/Edge Function development
    *   Environment variables setup (.env.local template)

## 11. Cost Optimization Strategies

*   **OpenAI API:**
    *   GPT-3.5-turbo fallback for simple expenses
    *   Response caching for similar inputs
    *   Prompt engineering for token efficiency
*   **Supabase:**
    *   Efficient query patterns to minimize database reads
    *   Edge Function optimization for fast cold starts
*   **Vercel:**
    *   Static generation where possible
    *   Optimized bundle sizes through tree shaking

## 12. Future Technology Considerations

*   **Planned Additions:**
    *   Playwright for comprehensive E2E testing
    *   Receipt OCR integration (Google Vision API or AWS Textract)
    *   PWA capabilities for mobile-first experience
    *   WebSockets for real-time group expense updates
*   **Scaling Options:**
    *   Supabase read replicas for analytics queries
    *   CDN optimization for global user base
    *   Edge Function geographic distribution 