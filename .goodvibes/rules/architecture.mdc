---
description: 
globs: 
alwaysApply: false
---
<!--
<vibeSpec>
    <purpose>This document serves as the high-level blueprint for the codebase, detailing its structure, key components, and their interactions. The AI requests this file to understand system organization and ensure new code aligns with established architectural patterns.</purpose>
    <scope>
        *   High-Level System Overview: Brief description/diagram of main parts and responsibilities.
        *   Directory & File Structure Conventions: Guidelines for code organization.
        *   Key Modules/Components/Services: Identification, description, responsibilities, and public interfaces (APIs).
        *   Data Flow Patterns: Descriptions or diagrams (e.g., Mermaid sequence diagrams) showing data movement.
        *   Key Design Patterns Employed: (e.g., MVC, Microservices, Repository Pattern).
        *   Communication Protocols (Internal): How system parts interact (e.g., REST, gRPC, Message Queues).
        *   Database Schema Overview (Conceptual): High-level description of key entities and relationships (not full DDL).
    </scope>
    <nonScope>
        *   Detailed UI mockups or user flows (`design.mdc`).
        *   Minor library choices unless architecturally significant (`tech-stack.mdc`).
        *   Implementation details of individual functions/methods.
        *   Exhaustive lists of every file/class; focus on structure and patterns.
    </nonScope>
    <usageNotes>Initial draft generated via `prompt-0-context-setup.md`. This is a "living document" updated throughout development, either via `prompt-5-update-context-doc.md` or as specified within implementation plan steps after validation. Requires regular human review. AI Agents should request this document when needing to understand system structure or placement of new components.</usageNotes>
</vibeSpec>
-->

# System Architecture

## 1. Overview

The application is a web-based platform built on a Next.js frontend and a Supabase backend. It leverages an LLM (OpenAI GPT) for natural language expense processing, with robust error handling, fallback mechanisms, and analytics for tracking success metrics.

## 2. Frontend Architecture

*   **Framework:** Next.js (React) with App Router
*   **Language:** TypeScript
*   **UI Components:** Shadcn/ui, Tailwind CSS
*   **State Management:** React Context API (for Auth), React Query for server state management and caching
*   **Key Modules:**
    *   `components/Auth`: User sign-up, login forms
    *   `components/Groups`: Group creation, listing, member management
    *   `components/Expenses`: Natural language input, expense confirmation/editing, manual expense forms, expense lists, itemized expense handling
    *   `components/Settlement`: Settlement summary display, debt finalization
    *   `components/Ledger`: Group ledger display
    *   `components/LLM`: Clarifying question dialogs, confidence indicators, error fallbacks
    *   `pages`: Next.js page components for different views (Auth, Groups, Group Detail)
    *   `contexts`: AuthContext for managing authentication state
    *   `hooks`: Custom hooks like `useAuth`, `useExpenseSubmission`, `useSettlementCalculation`
    *   `lib`: Utility functions (currency with decimal.js, date with date-fns, Supabase client)
    *   `lib/analytics`: User action tracking for success metrics

### Next.js App Router Patterns

*   **Client Components** (`'use client'`):
    *   Used for interactive components requiring state, event handlers, or React hooks
    *   Data fetching handled via React Query for optimal caching and background revalidation
    *   **Important**: Cannot use `export const revalidate` - this is only for server components
    *   Examples: GroupDetailView, ExpenseInput forms, Auth components
*   **Server Components** (default):
    *   Used for static or minimal-interactivity pages
    *   Can use `export const revalidate` for server-side data revalidation
    *   Reserved for non-interactive page layouts and static content
*   **Data Fetching Strategy**:
    *   Client components: React Query with `useQuery` for automatic caching and background refetching
    *   Server components: Direct database queries with optional revalidation intervals
    *   **Best Practice**: Prefer React Query for group/expense data due to real-time update requirements
*   **Performance Characteristics**:
    *   React Query caching: 5-minute stale time, 10-minute cache time for optimal UX
    *   Navigation response times: <200ms target (achieved 34ms cached responses)
    *   Bundle optimization: Client components avoid unnecessary server revalidation overhead
*   **Common Fix Pattern**: If encountering "Attempted to call revalidate() from the server but revalidate is on the client" error, remove `export const revalidate` from client components - React Query provides superior data management for interactive components
*   **Implementation Success Case**: Group detail navigation fix (BKLOG-20250601-002) - removing server revalidate from client component improved performance from server-dependent to 34ms cached responses

## 3. Backend Architecture

*   **Platform:** Supabase
*   **Database:** PostgreSQL with Row Level Security (RLS)
*   **Authentication:** Supabase Auth
*   **Serverless Functions:** Supabase Edge Functions
    *   `parse-expense`: Handles OpenAI API interaction, supports multiple expenses per input, implements error handling and fallback strategies
    *   `calculate-settlement`: Implements debt simplification algorithm (minimum spanning tree approach)
    *   `analytics-tracker`: Tracks success metrics (correction rates, completion times, user satisfaction)
    *   `create-expense-with-splits`: Enhanced expense creation function that handles expense creation with automatic split calculation
    *       **Input:** Expense details with split method (equal/amount/percentage) and participant information
    *       **Processing:** 
    *           - Validates user authentication and group membership
    *           - Calculates splits based on specified method with precise decimal handling
    *           - Creates expense and expense_splits records atomically
    *           - Handles remainder distribution for equal splits
    *           - Validates split amounts/percentages sum correctly
    *       **Output:** Complete expense data with created splits and summary information
    *       **Error Handling:** Comprehensive validation with rollback on failure
*   **Data Access:** `supabase-js` client library with comprehensive error handling

## 4. LLM Integration Architecture

*   **Model:** OpenAI o3 (with fallback to GPT-3.5-turbo for cost optimization)
*   **Interaction Patterns:**
    *   **Primary Flow:** Natural language input → structured expense data
    *   **Clarification Flow:** LLM uncertainty → clarifying questions → user response → refined interpretation
    *   **Multi-Expense Flow:** Single input containing multiple expenses → array of structured expense objects
    *   **Fallback Flow:** LLM failure → manual expense entry form
*   **Prompt Engineering:** 
    *   Context-aware prompts with group member information
    *   Structured output format enforcement via JSON schema
    *   Confidence scoring for interpretations
*   **Error Handling:**
    *   API timeout handling (10s timeout)
    *   Rate limiting management
    *   Graceful degradation to manual entry
    *   Retry logic with exponential backoff

## 5. Data Model (Supabase PostgreSQL)

*   **Users Table:** Stores user profile information (linked to `auth.users`)
    *   `id` (uuid, primary key, foreign key to `auth.users.id`)
    *   `name` (text, required)
    *   `email` (text, from `auth.users.email`)
    *   `created_at` (timestamp with time zone)
    *   `updated_at` (timestamp with time zone)

*   **Groups Table:**
    *   `group_id` (uuid, primary key)
    *   `name` (text, required)
    *   `created_by` (uuid, foreign key to `Users.id`)
    *   `created_at` (timestamp with time zone)
    *   `updated_at` (timestamp with time zone)

*   **GroupMembers Table:** (Links users to groups, supports placeholder members)
    *   `id` (uuid, primary key)
    *   `group_id` (uuid, foreign key to `Groups.group_id`)
    *   `user_id` (uuid, foreign key to `Users.id`, nullable for placeholder members)
    *   `placeholder_name` (text, nullable)
    *   `email` (text, nullable, for inviting or associating later)
    *   `is_placeholder` (boolean, default false)
    *   `role` (text, member roles like 'admin', 'member')
    *   `joined_at` (timestamp with time zone, domain-specific timestamp for when user joined group)
    *   `created_at` (timestamp with time zone, standard audit column for record creation)
    *   `updated_at` (timestamp with time zone, standard audit column for record modification)

*   **Expenses Table:** (Stores structured expense data as per FR3.5)
    *   `expense_id` (uuid, primary key)
    *   `group_id` (uuid, foreign key to `Groups.group_id`)
    *   `description` (text)
    *   `original_input_text` (text)
    *   `total_amount` (numeric(10,2))
    *   `currency` (text, default "USD")
    *   `date_of_expense` (date)
    *   `payers` (jsonb array: `[{ member_id, amount_paid }]`)
    *   `participants` (jsonb array: `[{ member_id, share_type, share_value, calculated_owed_amount }]`)
    *   `items` (jsonb array, optional: `[{ item_description, item_amount, item_participants }]`)
    *   `llm_assumptions` (text array)
    *   `llm_confidence_score` (numeric(3,2), nullable)
    *   `status` (text, enum: 'pending_confirmation', 'confirmed', 'edited', 'discarded')
    *   `category` (text, nullable) -- **Enhanced**: Expense categorization support (food, transport, accommodation, etc.)
    *   `tags` (text array, nullable) -- **Enhanced**: Flexible tagging system for expense organization
    *   `created_by` (uuid, foreign key to `Users.id`)
    *   `created_at` (timestamp with time zone)
    *   `updated_at` (timestamp with time zone)
    *   `processing_metadata` (jsonb, stores LLM processing info for analytics)

*   **ExpenseSplits Table:** (Advanced expense splitting with detailed member breakdown) -- **New for Enhanced Expense Management**
    *   `id` (uuid, primary key)
    *   `expense_id` (uuid, foreign key to `Expenses.expense_id`, cascade delete)
    *   `member_id` (uuid, foreign key to `GroupMembers.id`)
    *   `user_id` (uuid, foreign key to `Users.id`, nullable for placeholder members)
    *   `placeholder_name` (text, nullable, for non-registered participants)
    *   `split_amount` (decimal(10,2), amount this member owes for the expense)
    *   `share_description` (text, nullable, explanation of split calculation e.g., "Equal split of $30 among 3 people")
    *   `created_at` (timestamp with time zone)
    *   `updated_at` (timestamp with time zone)
    *   **Constraints:**
        *   Either `user_id` or `placeholder_name` must be provided (but not both)
        *   Unique constraint on (`expense_id`, `member_id`) to prevent duplicate splits
    *   **Indexes:** Optimized for `expense_id`, `member_id`, and `user_id` lookups
    *   **RLS Policies:** Users can only access splits for groups they belong to

*   **ExpensesWithSplits View:** (Convenience view combining expenses with their splits) -- **New for Enhanced Expense Management**
    *   Joins `Expenses` and `ExpenseSplits` tables
    *   Returns complete expense data with nested `expense_splits` array
    *   Optimized for displaying detailed expense breakdowns in the UI

*   **AnalyticsEvents Table:** (Tracks success metrics)
    *   `event_id` (uuid, primary key)
    *   `user_id` (uuid, foreign key to `Users.id`)
    *   `group_id` (uuid, foreign key to `Groups.group_id`, nullable)
    *   `expense_id` (uuid, foreign key to `Expenses.expense_id`, nullable)
    *   `event_type` (text, enum: 'expense_logged', 'expense_edited', 'settlement_viewed', 'clarification_asked')
    *   `event_data` (jsonb)
    *   `created_at` (timestamp with time zone)

## 6. Key Interactions & Flows

### 6.1. User Authentication Flow
1. Frontend (`SignUpForm.tsx`, `LoginForm.tsx`) → Supabase Auth
2. AuthContext updates across application
3. RLS policies enforce data access control

### 6.2. Group Management Flow
1. Frontend (`GroupCreateForm.tsx`) → `supabase-js` client → `Groups` table
2. Member addition → `GroupMembers` table (with placeholder support)
3. Email association → update placeholder members

### 6.3. Expense Logging (LLM) Flow
1. User inputs text in `NLLExpenseInput.tsx`
2. Frontend calls `parse-expense` Supabase Edge Function
3. Edge Function:
   - Calls OpenAI API with context-aware prompt
   - Handles multiple expenses if detected
   - Returns structured data OR clarifying questions
   - Logs analytics events
4. Frontend displays:
   - `ExpenseConfirmationCard.tsx` for successful parsing
   - `ClarifyingQuestionDialog.tsx` for uncertain interpretations
   - `ManualExpenseForm.tsx` for LLM failures
5. User confirmation → `Expenses` table (status: 'confirmed')

### 6.4. Settlement Calculation Flow
1. Frontend (`SettlementSummaryView.tsx`) calls `calculate-settlement` Edge Function
2. Edge Function:
   - Fetches all confirmed expenses for group
   - Calculates net balances between members
   - Applies debt simplification algorithm (minimum transactions)
   - Returns optimized settlement plan
3. Frontend displays simplified transactions

### 6.5. Analytics Flow
1. User actions trigger analytics events
2. `analytics-tracker` Edge Function processes events
3. Metrics aggregated for success tracking (correction rates, completion times)

## 7. Error Handling & Resilience Patterns

*   **LLM Integration:**
    *   Circuit breaker pattern for OpenAI API
    *   Timeout handling (10 seconds)
    *   Retry with exponential backoff
    *   Graceful degradation to manual entry
*   **Database Operations:**
    *   Transaction rollback for multi-table operations
    *   Connection pooling and retry logic
    *   RLS policy enforcement
*   **Frontend:**
    *   React Error Boundaries for component failures
    *   Optimistic updates with rollback
    *   Offline detection and queuing

## 8. Debt Simplification Algorithm

*   **Approach:** Modified minimum spanning tree algorithm
*   **Goal:** Minimize number of transactions while settling all debts
*   **Implementation:** 
    *   Calculate net balances between all member pairs
    *   Build debt graph with positive/negative balances
    *   Apply greedy algorithm to find minimum transaction set
*   **Edge Cases:** Handle floating-point precision using decimal.js

## 9. Analytics & Success Metrics Architecture

*   **Real-time Tracking:**
    *   LLM correction rates (target: <20%)
    *   Expense logging completion times (target: <30s)
    *   User satisfaction scores
    *   Settlement calculation performance
*   **Implementation:**
    *   Custom analytics hooks and context providers
    *   Event tracking in `AnalyticsEvents` table
    *   Aggregation queries for dashboard metrics
*   **Performance Thresholds:**
    *   Expense logging: 30 seconds maximum
    *   Settlement calculation: 5 seconds maximum
    *   LLM response time: 10 seconds timeout

## 10. Performance Monitoring Architecture

*   **Monitoring System (`lib/monitoring/performance.ts`):**
    *   Expense logging session tracking with correction rate metrics
    *   Settlement calculation performance measurement
    *   Success criteria validation (< 30s expense logging, < 20% correction rate, > 90% success rate)
    *   Memory management with automatic metric rotation (1000 metric limit)
    *   Execution time measurement utilities for sync/async functions
*   **React Integration:**
    *   Custom hooks for component performance tracking
    *   Real-time metric collection during user interactions
    *   Performance validation with requirement checking
*   **Success Metrics Validation:**
    *   Automated validation against defined thresholds
    *   Issue identification and reporting for failed requirements
    *   Export functionality for external analysis and monitoring dashboards

## 11. Production Deployment Architecture

*   **Frontend Deployment (Vercel):**
    *   Automatic deployments from main branch via GitHub Actions.
    *   Preview deployments for `develop` branch and pull requests to `main` (via GitHub Actions).
    *   Environment variable management for different stages handled by Vercel.
    *   Bundle optimization with code splitting (101KB shared, 203KB max route) - *Note: This is a placeholder value and should be verified post-deployment.*
*   **Backend Deployment (Supabase):**
    *   Edge Functions deployment with Deno runtime
    *   Environment-specific configuration (development/production)
    *   Database migrations and RLS policy management
*   **CI/CD Pipeline (GitHub Actions):**
    *   Workflow defined in `.github/workflows/deploy.yml`.
    *   Triggers on push to `main` (for production deployment) and `develop` (for preview/staging deployment).
    *   Pipeline Stages:
        *   Checkout code.
        *   Setup Node.js (version 18).
        *   Install dependencies (e.g., `npm install` within `./app_code`).
        *   Run Lint Check (e.g., `npm run lint` within `./app_code`).
        *   (Placeholder for Test Execution - to be enabled and configured as needed).
        *   Install Vercel CLI.
        *   Pull Vercel Environment Information (`vercel pull` for production/preview environments within `./app_code`).
        *   Build Project Artifacts (`vercel build` within `./app_code`).
        *   Deploy Project Artifacts to Vercel (`vercel deploy --prebuilt` within `./app_code`).
    *   Secrets Management: Uses GitHub Actions secrets (e.g., `VERCEL_TOKEN`). Vercel project secrets (like Supabase/OpenAI keys) are managed in the Vercel dashboard.
    *   Branching Strategy: `main` branch for production, `develop` branch for staging/preview deployments.
*   **Monitoring & Observability:**
    *   Performance monitoring system for success metrics tracking
    *   Error tracking and alerting
    *   Health checks for API connectivity (OpenAI, database)
    *   Bundle analysis and performance optimization
*   **Security Configuration:**
    *   CORS settings for cross-origin requests
    *   API rate limiting (OpenAI: 10 requests/min/user, Settlement: 5 requests/min/group)
    *   Data validation and sanitization (XSS protection)
    *   Row Level Security (RLS) policy enforcement

## Settlement Calculation System

### Debt Simplification Algorithm

The settlement calculation system uses a **greedy debt simplification algorithm** to minimize the number of transactions required to settle all debts within a group.

#### Algorithm Overview

1. **Balance Calculation**: For each group member, calculate their net balance by subtracting total owed from total paid
   - Positive balance = member is owed money  
   - Negative balance = member owes money
   - Zero balance = member is even

2. **Greedy Optimization**: Iteratively find the member who owes the most and the member who is owed the most, then create a transaction between them for the minimum of these amounts

3. **Transaction Generation**: Continue until all significant debts (> $0.01) are resolved

#### Implementation Details

**Edge Function**: `supabase/functions/calculate-settlement/index.ts`
- Fetches confirmed expenses and group members from database
- Calculates net balances using precise decimal arithmetic
- Generates optimized settlement transactions with minimum count
- Handles edge cases: zero balances, floating-point precision, placeholder members

**API Response**: Returns settlement result with:
- Array of settlement transactions (from member → to member + amount)
- Member balance summaries (total paid, total owed, net balance)
- Total settlement amount and transaction count
- Currency and metadata

#### Mathematical Properties

- **Optimality**: Produces minimum number of transactions for any debt configuration
- **Precision**: Uses decimal arithmetic to prevent floating-point errors  
- **Completeness**: Resolves all debts to within $0.01 precision
- **Efficiency**: O(n²) time complexity where n = number of group members

#### Integration Points

- **SettlementSummaryView**: Displays transactions with member tracking
- **GroupLedgerView**: Shows member balances and financial history
- **Database**: Works with confirmed expenses only for accurate settlements

## Performance Monitoring and Analytics

### Performance Monitoring System

The application includes a comprehensive performance monitoring system to track success metrics and ensure optimal user experience:

#### Key Metrics Tracked
- **Expense Logging Time**: Target < 30 seconds per expense
- **LLM Correction Rate**: Target < 20% of LLM-parsed expenses requiring correction
- **Success Rate**: Target > 90% successful expense completions
- **Settlement Calculation Time**: Target < 5 seconds for debt simplification

#### Monitoring Components
- **PerformanceMonitor Class**: Central monitoring system with session tracking
- **Execution Time Measurement**: Utilities for measuring sync/async function performance
- **React Performance Hooks**: Component render time tracking
- **Memory Management**: Automatic metric rotation to prevent memory leaks

#### Success Metrics Validation
```typescript
interface SuccessMetrics {
  averageExpenseLoggingTime: number
  correctionRate: number
  successRate: number
  averageSettlementTime: number
  totalExpensesLogged: number
  totalSettlementsCalculated: number
}
```

### Deployment Architecture

#### Production Environment
- **Platform**: Vercel for Next.js application hosting
- **Database**: Supabase PostgreSQL with Row Level Security
- **Edge Functions**: Supabase Edge Runtime for LLM processing and settlement calculations
- **CDN**: Vercel Edge Network for global content delivery

#### Environment Configuration
- **Development**: Local environment with `.env.local` configuration
- **Production**: Vercel environment variables with secure API keys
- **Database**: Supabase project with production-grade security policies

#### Performance Optimizations
- **Bundle Splitting**: Route-based code splitting (101KB shared, 203KB max route)
- **Caching Strategy**: React Query with 5-minute stale time for group data
- **Database Indexing**: Optimized indexes for group member lookups and expense queries
- **Edge Function Optimization**: Minimized cold start times with shared utilities

#### Security Configuration
- **CORS**: Configured for production domain restrictions
- **RLS Policies**: Database-level security for multi-tenant data isolation
- **API Rate Limiting**: Protection against abuse for OpenAI and settlement endpoints
- **Input Validation**: Zod schemas for type-safe data validation

#### Monitoring and Observability
- **Performance Metrics**: Real-time tracking of user interaction times
- **Error Monitoring**: Comprehensive error handling and logging
- **Health Checks**: API endpoints for system health validation
- **Analytics**: User behavior tracking for optimization insights

## Integration Testing Strategy

### End-to-End Test Coverage
- **Complete User Journey**: Account creation → Group management → Expense logging → Settlement
- **Component Integration**: Data structure validation and component interaction testing
- **Performance Testing**: Large dataset handling and concurrent user simulation
- **Edge Case Handling**: Error scenarios, network failures, and data inconsistencies

### Test Categories
1. **Utility Tests (12)**: Core financial calculations and date utilities
2. **Integration Tests (8)**: Complete workflow simulation and data validation
3. **Performance Tests (12)**: Monitoring system validation and execution time measurement

### Validation Criteria
- **Build Success**: TypeScript compilation and linting without errors
- **Test Coverage**: 32/32 core tests passing with comprehensive scenarios
- **Performance Requirements**: All success metrics within target thresholds
- **Code Quality**: Strict TypeScript compliance and consistent formatting

## Data Model Extensions

### Performance Metrics Schema
```typescript
interface PerformanceMetric {
  name: string
  value: number
  timestamp: Date
  metadata?: Record<string, unknown>
}
```

### Settlement Data Structures
```typescript
interface SettlementTransaction {
  id: string
  fromMemberId: string
  fromMemberName: string
  toMemberId: string
  toMemberName: string
  amount: number
  currency: string
  isFromPlaceholder: boolean
  isToPlaceholder: boolean
  isSettled?: boolean
}
```

## Technology Stack Updates

### Production Dependencies
- **Performance Monitoring**: Custom TypeScript monitoring system
- **Financial Calculations**: Decimal.js for precise arithmetic
- **Date Handling**: date-fns for comprehensive date utilities
- **Testing Framework**: Jest with comprehensive integration test suite

### Development Tools
- **Build Optimization**: Next.js 15.3.3 with automatic code splitting
- **Type Safety**: Strict TypeScript configuration with no-explicit-any rules
- **Code Quality**: ESLint with comprehensive rules and Prettier formatting
- **Performance Analysis**: Built-in monitoring and metrics validation

### Deployment Infrastructure
- **CI/CD**: Vercel automatic deployment on git push
- **Environment Management**: Secure environment variable handling
- **Database Migrations**: Supabase CLI for schema management
- **Edge Functions**: Supabase Edge Runtime for serverless compute

This architecture provides a robust, scalable foundation for the LLM-powered expense splitting application with comprehensive monitoring, testing, and deployment capabilities.

## 6. Production Database Architecture

*   **Production Environment:**
    *   Separate Supabase production project (jfefqebpxeynqgwqqmuv.supabase.co)
    *   All database migrations applied and synchronized with local development
    *   Row Level Security (RLS) policies active for all tables
    *   Connection pooling and optimization settings configured

*   **Performance Optimization:**
    *   **Comprehensive Indexing Strategy:**
        *   Primary indexes on high-traffic queries (groups by creator, expenses by group+date)
        *   Composite indexes for complex filtering (expenses with multiple criteria)
        *   Partial indexes for status-based queries (confirmed/pending expenses)
        *   GIN indexes for JSONB columns (payers, participants, items)
        *   Profile indexes for user lookups and authentication flows
    *   **Query Optimization:**
        *   Regular ANALYZE updates for query planner optimization
        *   Index monitoring and performance tracking
        *   Optimized for expense dashboard views, settlement calculations, and group membership checks

*   **Edge Function Deployment Patterns:**
    *   **Production Deployment:** Both `parse-expense` and `calculate-settlement` functions deployed to Supabase Edge
    *   **Environment Management:** OpenAI API key configured as Supabase secret for secure access
    *   **Function Status:** All functions in ACTIVE status and responsive to production requests
    *   **Dependency Management:** Automatic bundling and optimization for fast cold starts
    *   **Error Handling:** Proper error boundaries and logging for production debugging

## 7. Monitoring and Error Tracking Architecture

*   **Error Tracking (Sentry Integration):**
    *   **Next.js Configuration:** Sentry wrapped with comprehensive webpack plugin options
    *   **Custom Error Capture:** Context-aware error tracking with component, action, and user identification
    *   **Performance Monitoring:** Transaction tracking with 10% production sampling rate
    *   **Session Replay:** Error reproduction with privacy-conscious masking and blocking
    *   **Data Privacy:** Automatic scrubbing of sensitive user information

*   **React Error Boundaries:**
    *   **Global Error Boundary:** Application-wide error capture with fallback UI
    *   **Component-Specific Boundaries:** Specialized error handling for expense, group, and settlement features
    *   **Error Recovery:** User-friendly retry mechanisms and graceful degradation
    *   **Development Support:** Technical error details in development environment

*   **Analytics and User Journey Tracking:**
    *   **Event Tracking:** Comprehensive tracking of user actions (auth, groups, expenses, settlements)
    *   **Business Metrics:** Automated calculation of correction rates, success rates, and performance metrics
    *   **User Journey Analysis:** Session-based tracking with privacy-conscious data collection
    *   **Integration Support:** Vercel Analytics integration with custom analytics endpoints

*   **Performance Monitoring:**
    *   **Core Web Vitals:** Automated tracking of CLS, FCP, FID, LCP, and TTFB metrics
    *   **API Performance:** Response time tracking for database and Edge Function calls
    *   **Page Performance:** Load time, DOM content loaded, and time-to-first-byte monitoring
    *   **Custom Metrics:** Expense logging times, settlement calculation performance, LLM response times

*   **Production Monitoring Strategy:**
    *   **Error Rates:** Target <1% error rate with automatic alerting
    *   **Performance Thresholds:** Page load times <3s, API responses <500ms
    *   **LLM Monitoring:** Success rate tracking, confidence score analysis, correction rate monitoring
    *   **User Experience:** Session replay for critical error investigation
    *   **Privacy Compliance:** Data scrubbing and anonymization for sensitive information
