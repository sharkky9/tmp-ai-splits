---
description: 
globs: 
alwaysApply: false
---
<!--
<vibeSpec>
    <purpose>This document provides a detailed, step-by-step guide with TDD actions and validation criteria for implementing a specific feature. It is the primary input artifact used by the AI during coding prompts (like prompt-2 and prompt-3) to execute development tasks.</purpose>
    <scope>
        *   Frontmatter: `description`, `phase` (Exploration/Hardening), optional `globs`, `alwaysApply: false`.
        *   Overall Plan Goal: Clear statement of the plan's objective.
        *   Core Documents Potentially Affected: List for context/potential updates.
        *   Sequenced Steps: Each must include: `Step Goal`, `Actions` (TDD), `Validation Criteria`, `Risks`, `Core Document Updates`, `Progress Marker`.
        *   Mandatory First Step: `Step 0: Test Scaffold` (creating failing test stubs).
        *   Mandatory Last Step: `Step n: Clean Up and Testing` (code polish, standards check, final test runs).
        *   (Optional) Contextual Code: Snippets for AI context.
    </scope>
    <nonScope>
        *   Vague, ambiguous, or large, monolithic steps.
        *   Steps without clear, testable validation.
        *   Core project-level rules (defined in `rules.mdc`).
        *   General project documentation not tied to the plan's execution.
    </nonScope>
    <usageNotes>Generated via `prompt-1-generate-implementation-plan.md`. Requires thorough human review before execution. The `Progress Marker` within the plan is updated by the AI during execution (via `prompt-2-implement-plan.md` or `prompt-3-continue-plan.md`). AI Agents executing prompts 2, 3, 3.5, 4 always have the relevant plan as context.</usageNotes>
</vibeSpec>
-->

description: Implementation Plan for User Profile Editing Feature
globs: [src/api/schemas/user_schemas.py, src/app/services/user_service.py, src/api/routers/users_router.py, src/ui/components/profile/*]
alwaysApply: false

# Implementation Plan: User Profile Editing

**Goal:** Allow authenticated users to view and update their profile information (username, email)

## Implementation Context

### User & Functional Perspective
- **Problem Solved:** Users need to update their profile information without contacting administrators.
- **Key Workflows:** User navigates to profile page, views current information, edits fields, and saves changes.
- **Core Capabilities:** View profile data, validate input, update profile information, handle validation errors.

### Technical Implementation
- **Architecture Fit:** Extends existing user management functionality with profile editing capabilities.
- **Affected Components:** User service, API endpoints, and profile UI components.
- **Data Model Changes:** No schema changes needed, using existing user model.

### Boundaries & Constraints
- **Out of Scope:** Password changes, profile picture uploads, and account deletion.
- **Limitations:** Email updates require unique validation.
- **Unchanged Functionality:** Authentication flow and user permissions system.

## Relevant Files

- `src/api/schemas/user_schemas.py` - **MODIFY** - Add UserProfileUpdate and UserProfileRead schemas
- `src/app/services/user_service.py` - **MODIFY** - Add update_user_profile method
- `tests/app/services/test_user_service.py` - **MODIFY** - Add tests for update_user_profile
- `src/api/routers/users_router.py` - **MODIFY** - Add profile update endpoint
- `tests/api/test_users_api.py` - **MODIFY** - Add tests for profile update endpoint
- `src/ui/components/profile/ProfileForm.jsx` - **NEW** - Create form component for profile editing
- `src/ui/components/profile/ProfilePage.jsx` - **NEW** - Create page component for profile management
- `src/ui/components/profile/ProfileForm.test.jsx` - **NEW** - Tests for profile form component

## Core Documents Affected

- `architecture.mdc` - Update API endpoints section (Step 3)
  - Document new profile update endpoint
  - Update UserService description to include profile management
- `design.mdc` - Add user profile editing flow (Step 4)
  - Include wireframes for profile editing UI
  - Document form validation and error handling patterns

## Success Metrics
- All unit and integration tests pass with 90%+ coverage
- Profile updates complete in under 500ms
- Form validation provides clear feedback for all error conditions
- UI is accessible and meets WCAG 2.1 AA standards

## Step 0: Test Scaffolding
*   **Goal:** Create failing test stubs for all profile editing functionality.
*   **Actions:**
    1.  **Test Stubs:** Create failing test stubs in `tests/app/services/test_user_service.py`:
        *   `test_update_user_profile_success()`
        *   `test_update_user_profile_user_not_found()`
        *   `test_update_user_profile_email_conflict()`
        *   `test_update_user_profile_partial_update()`
    2.  **Test Stubs:** Create failing test stubs in `tests/api/test_users_api.py`:
        *   `test_profile_update_endpoint_success()`
        *   `test_profile_update_endpoint_unauthorized()`
        *   `test_profile_update_endpoint_invalid_data()`
        *   `test_profile_update_endpoint_email_conflict()`
    3.  **Test Stubs:** Create failing test stubs for UI components:
        *   `test_profile_form_renders_correctly()`
        *   `test_profile_form_validation()`
        *   `test_profile_form_submission()`
*   **Validation:**
    *   All test stubs are created in the appropriate test files.
    *   Running the tests shows all new tests failing (as expected at this stage).
*   **Risks:**
    *   Some edge cases might be missed in the initial test design.
    *   Test stubs might not cover all required validation rules for profile data.
*   **Core Document Updates:** None for this step.
*   **Progress:** Not Started

## Step 1: Define Data Structures & API Schema

*   **Goal:** Specify the data format for profile updates and the API response.
*   **Actions:**
    1.  **Instructions:** Define a Pydantic schema (if Python/FastAPI) or TypeScript interface/DTO named `UserProfileUpdate` in `src/api/schemas/user_schemas.py` (or equivalent path) containing fields like `username` (optional string), `email` (optional string, valid email format).
    2.  **Instructions:** Define a Pydantic schema or TypeScript interface/DTO named `UserProfileRead` in the same file, representing the data returned after fetching or updating a profile (e.g., `id`, `username`, `email`, `updated_at`).
    3.  **Test:** No code execution tests for this step. Manually verify the schemas/interfaces accurately represent the required data.
*   **Validation:**
    *   Check that the schemas/interfaces `UserProfileUpdate` and `UserProfileRead` are created in the specified location.
    *   Verify the fields and types match the feature requirements.
*   **Core Document Updates:** `architecture.mdc` (mention new schemas under API/Schemas section).
*   **Progress:** Not Started

---

## Step 2: Create Profile Update Service Logic

*   **Goal:** Implement the business logic to handle profile updates.
*   **Actions:**
    1.  **Instructions:** Add a new method `update_user_profile(user_id: int, profile_data: UserProfileUpdate)` to the `UserService` (or equivalent service, e.g., `src/app/services/user_service.py`).
    2.  **Instructions:** Implement the logic within `update_user_profile`:
        *   Fetch the user by `user_id` using the user repository.
        *   If user not found, raise an appropriate exception (e.g., `NotFoundException`).
        *   If `profile_data.email` is provided and different from the current email, check if the new email is already taken by another user. If so, raise a `ConflictException`.
        *   Update the user object's fields based on the non-null values in `profile_data`.
        *   Save the updated user object using the user repository.
        *   Return the updated user data, formatted according to `UserProfileRead` schema.
    3.  **Test:**
        *   **Instructions:** In `tests/app/services/test_user_service.py`, write unit tests for the `update_user_profile` method.
        *   **Instructions:** Include test cases for: successful update, user not found, email conflict, partial updates (only username or only email).
        *   **Instructions:** Ensure all tests for this method pass.
*   **Validation:**
    *   Verify the `update_user_profile` method exists in the correct service file.
    *   Run the unit tests created in Action 3; all must pass.
*   **Core Document Updates:** `architecture.mdc` (update description of `UserService` to include the new method).
*   **Progress:** Not Started

---

## Step 3: Create API Endpoint for Profile Update

*   **Goal:** Expose the profile update functionality via an API endpoint.
*   **Actions:**
    1.  **Instructions:** In the user API router (`src/api/routers/users_router.py` or equivalent), add a PUT or PATCH endpoint, e.g., `PATCH /users/me/profile`.
    2.  **Instructions:** Protect the endpoint; ensure it requires authentication and can access the current user's ID.
    3.  **Instructions:** Use the `UserProfileUpdate` schema for the request body validation.
    4.  **Instructions:** Use the `UserProfileRead` schema for the response model.
    5.  **Instructions:** Inject the `UserService` and call the `update_user_profile` method with the authenticated user's ID and the request body data.
    6.  **Instructions:** Handle potential exceptions (e.g., `NotFoundException`, `ConflictException`) raised by the service and return appropriate HTTP status codes (e.g., 404, 409).
    7.  **Test:**
        *   **Instructions:** Write integration tests for the `PATCH /users/me/profile` endpoint in `tests/api/test_users_api.py` (or equivalent).
        *   **Instructions:** Test cases should include: successful update, unauthorized access (no token), invalid input data (fails schema validation), user not found (if applicable, though likely handled by auth), email conflict.
        *   **Instructions:** Ensure all tests for this endpoint pass.
*   **Validation:**
    *   Verify the new endpoint exists in the correct router file.
    *   Run the integration tests created in Action 7; all must pass.
    *   (Optional Manual Check) Use an API client (like Postman or curl) to send a request to the endpoint with valid authentication and data, verifying a successful response. Check invalid cases too.
*   **Core Document Updates:** `architecture.mdc` (add the new endpoint description).
*   **Progress:** Not Started

---

## Step 4: Implement Profile Edit UI

*   **Goal:** Create a user interface for viewing and editing profile information.
*   **Actions:**
    1.  **Instructions:** Create a `ProfileForm` component in `src/ui/components/profile/ProfileForm.jsx` (or equivalent path).
        *   The form should display the current user's profile information (username, email).
        *   Include input fields for editing these values.
        *   Add validation for email format.
        *   Add a submit button and cancel button.
        *   On submit, call the API endpoint created in Step 3.
        *   Display success message on successful update.
        *   Display appropriate error messages for validation failures or API errors.
    2.  **Instructions:** Create a `ProfilePage` component in `src/ui/components/profile/ProfilePage.jsx` that includes the `ProfileForm` and any additional UI elements needed for the profile page.
    3.  **Instructions:** Add the `ProfilePage` to the application's routing configuration.
    4.  **Test:**
        *   **Instructions:** Write unit tests for the `ProfileForm` component in `src/ui/components/profile/ProfileForm.test.jsx`.
        *   **Instructions:** Test cases should include: form rendering, validation, submission handling, error display.
        *   **Instructions:** Ensure all tests pass.
*   **Validation:**
    *   Verify the `ProfileForm` and `ProfilePage` components exist in the correct locations.
    *   Run the unit tests created in Action 4; all must pass.
    *   (Optional Manual Check) Navigate to the profile page in the application, verify the form displays correctly, test editing functionality, and confirm validation and error handling work as expected.
*   **Risks:**
    *   Form validation might not match backend validation rules, leading to confusing error messages.
    *   UI components might not be fully accessible, requiring additional work to meet accessibility standards.
    *   Error handling might not cover all possible API error responses.
*   **Core Document Updates:** `design.mdc` (update UI components section to include the new profile editing UI).
*   **Progress:** Not Started

---

## Step 5: Clean Up and Testing

*   **Goal:** Finalize the implementation by polishing the code, ensuring adherence to coding standards, and running comprehensive tests.
*   **Actions:**
    1.  **Instructions:** Review all code changes for adherence to project coding standards.
    2.  **Instructions:** Run all unit tests, integration tests, and UI tests to ensure everything passes.
    3.  **Instructions:** Perform a manual review of the profile editing functionality to catch any visual or usability issues.
    4.  **Instructions:** Document any issues found during testing and address them.
*   **Validation:**
    *   Verify all tests pass.
    *   Confirm the profile editing UI works as expected and is visually appealing.
    *   Review the code for adherence to coding standards.
*   **Risks:**
    *   Some edge cases might have been missed during testing.
    *   Code might not fully adhere to coding standards, requiring additional cleanup.
*   **Core Document Updates:** None for this step.
*   **Progress:** Not Started